/* 
 * Ladybug Visualization Schema
 *
 * Documentation for Ladybug visualization schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace LadybugDisplaySchema
{
    /// <summary>
    /// A cone object.
    /// </summary>
    [Serializable]
    [DataContract(Name = "Cone")]
    public partial class Cone : OpenAPIGenBaseModel, IEquatable<Cone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cone() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "Cone";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Cone" /> class.
        /// </summary>
        /// <param name="vertex">The point at the tip of the cone as 3 (x, y, z) values. (required).</param>
        /// <param name="axis">The vector representing the direction of the cone as 3 (x, y, z) values. The vector extends from the vertex to the center of the base. (required).</param>
        /// <param name="angle">An angle in radians representing the half angle between the axis and the surface. (required).</param>
        public Cone
        (
           List<double> vertex, List<double> axis, double angle// Required parameters
            // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "vertex" is required (not null)
            this.Vertex = vertex ?? throw new ArgumentNullException("vertex is a required property for Cone and cannot be null");
            // to ensure "axis" is required (not null)
            this.Axis = axis ?? throw new ArgumentNullException("axis is a required property for Cone and cannot be null");
            this.Angle = angle;

            // Set non-required readonly properties with defaultValue
            this.Type = "Cone";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(Cone))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "Cone";

        /// <summary>
        /// The point at the tip of the cone as 3 (x, y, z) values.
        /// </summary>
        /// <value>The point at the tip of the cone as 3 (x, y, z) values.</value>
        [DataMember(Name = "vertex", IsRequired = true)]
        public List<double> Vertex { get; set; } 
        /// <summary>
        /// The vector representing the direction of the cone as 3 (x, y, z) values. The vector extends from the vertex to the center of the base.
        /// </summary>
        /// <value>The vector representing the direction of the cone as 3 (x, y, z) values. The vector extends from the vertex to the center of the base.</value>
        [DataMember(Name = "axis", IsRequired = true)]
        public List<double> Axis { get; set; } 
        /// <summary>
        /// An angle in radians representing the half angle between the axis and the surface.
        /// </summary>
        /// <value>An angle in radians representing the half angle between the axis and the surface.</value>
        [DataMember(Name = "angle", IsRequired = true)]
        public double Angle { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Cone";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Cone:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Vertex: ").Append(this.Vertex).Append("\n");
            sb.Append("  Axis: ").Append(this.Axis).Append("\n");
            sb.Append("  Angle: ").Append(this.Angle).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Cone object</returns>
        public static Cone FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Cone>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Cone object</returns>
        public virtual Cone DuplicateCone()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateCone();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateCone();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Cone);
        }

        /// <summary>
        /// Returns true if Cone instances are equal
        /// </summary>
        /// <param name="input">Instance of Cone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cone input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Vertex == input.Vertex ||
                    Extension.AllEquals(this.Vertex, input.Vertex)
                ) && 
                (
                    this.Axis == input.Axis ||
                    Extension.AllEquals(this.Axis, input.Axis)
                ) && 
                    Extension.Equals(this.Angle, input.Angle) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Vertex != null)
                    hashCode = hashCode * 59 + this.Vertex.GetHashCode();
                if (this.Axis != null)
                    hashCode = hashCode * 59 + this.Axis.GetHashCode();
                if (this.Angle != null)
                    hashCode = hashCode * 59 + this.Angle.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            

            

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^Cone$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
