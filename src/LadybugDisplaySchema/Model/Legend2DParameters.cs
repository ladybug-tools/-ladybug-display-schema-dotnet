/* 
 * Ladybug Visualization Schema
 *
 * Documentation for Ladybug visualization schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace LadybugDisplaySchema
{
    /// <summary>
    /// Base class for all objects that are not extensible with additional keys.
    /// </summary>
    [Serializable]
    [DataContract(Name = "Legend2DParameters")]
    public partial class Legend2DParameters : OpenAPIGenBaseModel, IEquatable<Legend2DParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Legend2DParameters" /> class.
        /// </summary>
        /// <param name="originX">A text string to note the X coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of X moving to the right). Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 10px)..</param>
        /// <param name="originY">A text string to note the Y coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of Y moving downward). Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 50px)..</param>
        /// <param name="segmentHeight">A text string to note the height for each of the legend segments. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make most legends readable (25px for horizontal legends and 36px for vertical legends)..</param>
        /// <param name="segmentWidth">A text string to set the width for each of the legend segments. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make most legends readable (36px for horizontal legends and 25px for vertical legends)..</param>
        /// <param name="textHeight">A text string to set the height for the legend text. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. Default is 1/3 of the segment_height. Default is 12px..</param>
        public Legend2DParameters
        (
            // Required parameters
           AnyOf<Default, string> originX= default, AnyOf<Default, string> originY= default, AnyOf<Default, string> segmentHeight= default, AnyOf<Default, string> segmentWidth= default, AnyOf<Default, string> textHeight= default// Optional parameters
        ) : base()// BaseClass
        {
            this.OriginX = originX;
            this.OriginY = originY;
            this.SegmentHeight = segmentHeight;
            this.SegmentWidth = segmentWidth;
            this.TextHeight = textHeight;

            // Set non-required readonly properties with defaultValue
            this.Type = "Legend2DParameters";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(Legend2DParameters))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "Legend2DParameters";

        /// <summary>
        /// A text string to note the X coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of X moving to the right). Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 10px).
        /// </summary>
        /// <value>A text string to note the X coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of X moving to the right). Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 10px).</value>
        [DataMember(Name = "origin_x")]
        public AnyOf<Default, string> OriginX { get; set; } 
        /// <summary>
        /// A text string to note the Y coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of Y moving downward). Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 50px).
        /// </summary>
        /// <value>A text string to note the Y coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of Y moving downward). Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 50px).</value>
        [DataMember(Name = "origin_y")]
        public AnyOf<Default, string> OriginY { get; set; } 
        /// <summary>
        /// A text string to note the height for each of the legend segments. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make most legends readable (25px for horizontal legends and 36px for vertical legends).
        /// </summary>
        /// <value>A text string to note the height for each of the legend segments. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make most legends readable (25px for horizontal legends and 36px for vertical legends).</value>
        [DataMember(Name = "segment_height")]
        public AnyOf<Default, string> SegmentHeight { get; set; } 
        /// <summary>
        /// A text string to set the width for each of the legend segments. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make most legends readable (36px for horizontal legends and 25px for vertical legends).
        /// </summary>
        /// <value>A text string to set the width for each of the legend segments. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make most legends readable (36px for horizontal legends and 25px for vertical legends).</value>
        [DataMember(Name = "segment_width")]
        public AnyOf<Default, string> SegmentWidth { get; set; } 
        /// <summary>
        /// A text string to set the height for the legend text. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. Default is 1/3 of the segment_height. Default is 12px.
        /// </summary>
        /// <value>A text string to set the height for the legend text. Text must be formatted as an integer followed by either \&quot;px\&quot; (to denote the number of viewport pixels) or \&quot;%\&quot; (to denote the percentage of the viewport height). Examples include 10px, 5%. Default is 1/3 of the segment_height. Default is 12px.</value>
        [DataMember(Name = "text_height")]
        public AnyOf<Default, string> TextHeight { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Legend2DParameters";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Legend2DParameters:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  OriginX: ").Append(this.OriginX).Append("\n");
            sb.Append("  OriginY: ").Append(this.OriginY).Append("\n");
            sb.Append("  SegmentHeight: ").Append(this.SegmentHeight).Append("\n");
            sb.Append("  SegmentWidth: ").Append(this.SegmentWidth).Append("\n");
            sb.Append("  TextHeight: ").Append(this.TextHeight).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Legend2DParameters object</returns>
        public static Legend2DParameters FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Legend2DParameters>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Legend2DParameters object</returns>
        public virtual Legend2DParameters DuplicateLegend2DParameters()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateLegend2DParameters();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateLegend2DParameters();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Legend2DParameters);
        }

        /// <summary>
        /// Returns true if Legend2DParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of Legend2DParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Legend2DParameters input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Type, input.Type) && 
                    Extension.Equals(this.OriginX, input.OriginX) && 
                    Extension.Equals(this.OriginY, input.OriginY) && 
                    Extension.Equals(this.SegmentHeight, input.SegmentHeight) && 
                    Extension.Equals(this.SegmentWidth, input.SegmentWidth) && 
                    Extension.Equals(this.TextHeight, input.TextHeight);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OriginX != null)
                    hashCode = hashCode * 59 + this.OriginX.GetHashCode();
                if (this.OriginY != null)
                    hashCode = hashCode * 59 + this.OriginY.GetHashCode();
                if (this.SegmentHeight != null)
                    hashCode = hashCode * 59 + this.SegmentHeight.GetHashCode();
                if (this.SegmentWidth != null)
                    hashCode = hashCode * 59 + this.SegmentWidth.GetHashCode();
                if (this.TextHeight != null)
                    hashCode = hashCode * 59 + this.TextHeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^Legend2DParameters$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
