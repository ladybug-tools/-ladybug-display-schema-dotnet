/* 
 * Ladybug Visualization Schema
 *
 * Documentation for Ladybug visualization schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace LadybugDisplaySchema
{
    /// <summary>
    /// A visualization set containing analysis and context geometry to be visualized.
    /// </summary>
    [Serializable]
    [DataContract(Name = "VisualizationSet")]
    public partial class VisualizationSet : OpenAPIGenBaseModel, IEquatable<VisualizationSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VisualizationSet" /> class.
        /// </summary>
        /// <param name="analysisGeometry">An AnalysisGeometry object for spatial data that should be displayed in the visualization..</param>
        /// <param name="contextGeometry">An optional list of ladybug-geometry or ladybug-display objects that gives context to the analysis geometry or other aspects of the visualization. Typically, these will display in wireframe around the geometry, though the properties of display geometry can be used to customize the visualization..</param>
        public VisualizationSet
        (
            // Required parameters
           AnalysisGeometry analysisGeometry= default, List<AnyOf<IDisplay>> contextGeometry = default// Optional parameters
        ) : base()// BaseClass
        {
            this.AnalysisGeometry = analysisGeometry;
            this.ContextGeometry = contextGeometry;

            // Set non-required readonly properties with defaultValue
            this.Type = "VisualizationSet";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(VisualizationSet))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "VisualizationSet";

        /// <summary>
        /// An AnalysisGeometry object for spatial data that should be displayed in the visualization.
        /// </summary>
        /// <value>An AnalysisGeometry object for spatial data that should be displayed in the visualization.</value>
        [DataMember(Name = "analysis_geometry")]
        public AnalysisGeometry AnalysisGeometry { get; set; } 
        /// <summary>
        /// An optional list of ladybug-geometry or ladybug-display objects that gives context to the analysis geometry or other aspects of the visualization. Typically, these will display in wireframe around the geometry, though the properties of display geometry can be used to customize the visualization.
        /// </summary>
        /// <value>An optional list of ladybug-geometry or ladybug-display objects that gives context to the analysis geometry or other aspects of the visualization. Typically, these will display in wireframe around the geometry, though the properties of display geometry can be used to customize the visualization.</value>
        [DataMember(Name = "context_geometry")]
        public List<AnyOf<IDisplay>> ContextGeometry { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "VisualizationSet";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("VisualizationSet:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  AnalysisGeometry: ").Append(this.AnalysisGeometry).Append("\n");
            sb.Append("  ContextGeometry: ").Append(this.ContextGeometry).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>VisualizationSet object</returns>
        public static VisualizationSet FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<VisualizationSet>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>VisualizationSet object</returns>
        public virtual VisualizationSet DuplicateVisualizationSet()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateVisualizationSet();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateVisualizationSet();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as VisualizationSet);
        }

        /// <summary>
        /// Returns true if VisualizationSet instances are equal
        /// </summary>
        /// <param name="input">Instance of VisualizationSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisualizationSet input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Type, input.Type) && 
                    Extension.Equals(this.AnalysisGeometry, input.AnalysisGeometry) && 
                (
                    this.ContextGeometry == input.ContextGeometry ||
                    Extension.AllEquals(this.ContextGeometry, input.ContextGeometry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AnalysisGeometry != null)
                    hashCode = hashCode * 59 + this.AnalysisGeometry.GetHashCode();
                if (this.ContextGeometry != null)
                    hashCode = hashCode * 59 + this.ContextGeometry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^VisualizationSet$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
