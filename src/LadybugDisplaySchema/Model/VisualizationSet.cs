/* 
 * Ladybug Visualization Schema
 *
 * Documentation for Ladybug visualization schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace LadybugDisplaySchema
{
    /// <summary>
    /// A visualization set containing analysis and context geometry to be visualized.
    /// </summary>
    [Serializable]
    [DataContract(Name = "VisualizationSet")]
    public partial class VisualizationSet : VisualizationBase, IEquatable<VisualizationSet>, IValidatableObject
    {
        /// <summary>
        /// Text indicating the units in which the model geometry exists. If None, the geometry will always be assumed to be in the current units system of the display interface.
        /// </summary>
        /// <value>Text indicating the units in which the model geometry exists. If None, the geometry will always be assumed to be in the current units system of the display interface.</value>
        [DataMember(Name="units")]
        public Units Units { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="VisualizationSet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VisualizationSet() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "VisualizationSet";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="VisualizationSet" /> class.
        /// </summary>
        /// <param name="geometry">A list of AnalysisGeometry and ContextGeometry objects to display in the visualization. Each geometry object will typically be translated to its own layer within the interface that renders the VisualizationSet..</param>
        /// <param name="units">Text indicating the units in which the model geometry exists. If None, the geometry will always be assumed to be in the current units system of the display interface..</param>
        /// <param name="identifier">Text string for a unique object ID. Must be less than 100 characters and not contain spaces or special characters. (required).</param>
        /// <param name="displayName">Display name of the object with no character restrictions. This is typically used to set the layer of the object in the interface that renders the VisualizationSet. A :: in the display_name can be used to denote sub-layers following a convention of ParentLayer::SubLayer. If not set, the display_name will be equal to the object identifier..</param>
        /// <param name="userData">Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list)..</param>
        public VisualizationSet
        (
            string identifier, // Required parameters
            string displayName= default, Object userData= default, List<AnyOf<AnalysisGeometry, ContextGeometry>> geometry= default, Units units= default// Optional parameters
        ) : base(identifier: identifier, displayName: displayName, userData: userData )// BaseClass
        {
            this.Geometry = geometry;
            this.Units = units;

            // Set non-required readonly properties with defaultValue
            this.Type = "VisualizationSet";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(VisualizationSet))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "VisualizationSet";

        /// <summary>
        /// A list of AnalysisGeometry and ContextGeometry objects to display in the visualization. Each geometry object will typically be translated to its own layer within the interface that renders the VisualizationSet.
        /// </summary>
        /// <value>A list of AnalysisGeometry and ContextGeometry objects to display in the visualization. Each geometry object will typically be translated to its own layer within the interface that renders the VisualizationSet.</value>
        [DataMember(Name = "geometry")]
        public List<AnyOf<AnalysisGeometry, ContextGeometry>> Geometry { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "VisualizationSet";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("VisualizationSet:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Identifier: ").Append(this.Identifier).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  UserData: ").Append(this.UserData).Append("\n");
            sb.Append("  Geometry: ").Append(this.Geometry).Append("\n");
            sb.Append("  Units: ").Append(this.Units).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>VisualizationSet object</returns>
        public static VisualizationSet FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<VisualizationSet>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>VisualizationSet object</returns>
        public virtual VisualizationSet DuplicateVisualizationSet()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateVisualizationSet();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override VisualizationBase DuplicateVisualizationBase()
        {
            return DuplicateVisualizationSet();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as VisualizationSet);
        }

        /// <summary>
        /// Returns true if VisualizationSet instances are equal
        /// </summary>
        /// <param name="input">Instance of VisualizationSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisualizationSet input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Type, input.Type) && 
                (
                    this.Geometry == input.Geometry ||
                    Extension.AllEquals(this.Geometry, input.Geometry)
                ) && 
                    Extension.Equals(this.Units, input.Units);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^VisualizationSet$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
